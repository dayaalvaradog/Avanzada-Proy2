@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    ViewData["Title"] = "Gestión de Ubicaciones de Semillas";
}

<h1>Gestión de Ubicaciones de Semillas</h1>

<div style="text-align: right;">
    <button class="btn btn-sm btn-success">
        <a class="nav-link text-dark" asp-area="" asp-controller="Ubicaciones" asp-action="Agregar">Agregar Ubicación</a>
    </button>
</div>

<div id="mensajeListaUbicaciones" class="mt-3"></div>

<table id="ubicacionesTable" class="table table-striped table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Condiciones de Almacenamiento</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody id="ubicacionesTableBody">
    </tbody>
</table>
@section Scripts {
    <script>
        const API_BASE_URL = "@Configuration["AppSettings:ApiBaseUrl"]";
        const API_UBICACIONES_URL = `${API_BASE_URL}/api/Ubicaciones`;
        const ubicacionesTableBody = document.getElementById('ubicacionesTableBody');
        const mensajeListaUbicaciones = document.getElementById('mensajeListaUbicaciones');

        async function loadUbicaciones() {
            try {
                // Llama al endpoint de tu API para obtener las ubicaciones
                const response = await fetch(`${API_UBICACIONES_URL}`);

                if (response.ok) {
                    const ubicaciones = await response.json();
                    ubicacionesTableBody.innerHTML = '';

                    if (ubicaciones.length === 0) {
                        mensajeListaUbicaciones.className = 'alert alert-info';
                        mensajeListaUbicaciones.innerHTML = 'No se encontraron ubicaciones.';
                        return;
                    }

                    ubicaciones.forEach(ubicacion => {
                        const row = `
                            <tr>
                                <td>${ubicacion.idUbicacion}</td>
                                <td>${ubicacion.nombre}</td>
                                <td>${ubicacion.descripcion}</td>
                                <td>${ubicacion.condicionesAlmacenamiento}</td>
                                <td>
                                </td>
                            </tr>
                        `;

                                    // <button class="btn btn-sm btn-info edit-ubicacion" data-id="${ubicacion.idUbicacion}">Editar</button>
                                    // <button class="btn btn-sm btn-danger delete-ubicacion" data-id="${ubicacion.idUbicacion}">Eliminar</button>
                        ubicacionesTableBody.innerHTML += row;
                    });

                    // Configura los eventos de los botones "Editar"
                    document.querySelectorAll('.edit-ubicacion').forEach(button => {
                        button.addEventListener('click', function() {
                            const ubicacionId = this.dataset.id;
                            // Redirigir a la vista de edición
                            window.location.href = `/Ubicaciones/Editar/${ubicacionId}`;
                        });
                    });

                    // Configura los eventos de los botones "Eliminar"
                    document.querySelectorAll('.delete-ubicacion').forEach(button => {
                        button.addEventListener('click', async function() {
                            const ubicacionId = this.dataset.id;

                            // Muestra la ventana de confirmación
                            const confirmacion = confirm("¿Estás seguro de que deseas eliminar esta ubicación?");

                            if (confirmacion) {
                                try {
                                    // Realiza la petición DELETE al API
                                    const API_BASE_URL = "@Configuration["AppSettings:ApiBaseUrl"]";
                                    const apiUrl = `${API_BASE_URL}/api/Ubicaciones/${ubicacionId}`;

                                    const response = await fetch(apiUrl, {
                                        method: 'DELETE'
                                    });

                                    if (response.ok) {
                                        alert('Ubicación eliminada exitosamente.');
                                        // Recarga la página para mostrar los cambios
                                        window.location.reload();
                                    } else {
                                        const errorData = await response.json();
                                        alert('Error al eliminar la ubicación: ' + JSON.stringify(errorData));
                                        console.error('Error del API:', errorData);
                                    }
                                } catch (error) {
                                    console.error('Error de red al eliminar la ubicación:', error);
                                    alert('Ocurrió un error de red.');
                                }
                            }
                        });
                    });

                } else {
                    mensajeListaUbicaciones.className = 'alert alert-danger';
                    mensajeListaUbicaciones.innerHTML = 'Error al cargar ubicaciones.';
                }
            } catch (error) {
                mensajeListaUbicaciones.className = 'alert alert-danger';
                mensajeListaUbicaciones.innerHTML = `Ocurrió un error de red: ${error.message}.`;
            }
        }

        loadUbicaciones();
    </script>
}
