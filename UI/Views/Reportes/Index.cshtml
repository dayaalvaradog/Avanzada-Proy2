@model UI.Models.ReporteIndexViewModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

@{
    ViewData["Title"] = "Reportes Programados";
}

<h1>Reportes Programados</h1>

<p>
    <a asp-action="Agregar" class="btn btn-primary">Crear Nuevo Reporte</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre del Reporte</th>
            <th>Frecuencia</th>
            <th>Próximo Envío</th>
            <th>Activo</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var reporte in Model.Reportes)
        {
            <tr>
                <td>@reporte.idReporte</td>
                <td>@reporte.nombreReporte</td>
                <td>@reporte.tipoFrecuencia.frecuencia</td>
                <td>formatDateTime(@reporte.proximoEnvio?)</td>
                <td>
                    <input type="checkbox" checked="@reporte.activo" disabled />
                </td>
                <td>
                    <a asp-action="Editar" asp-route-id="@reporte.idReporte">Editar</a> |
                    <a asp-action="Detalles" asp-route-id="@reporte.idReporte">Detalles</a> |
                    <a href="#" onclick="eliminarReporte(@reporte.idReporte)">Eliminar</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<div id="mensaje" class="mt-3"></div>

@section Scripts {
    <script>
        const API_BASE_URL = "@Configuration["AppSettings:ApiBaseUrl"]";

        async function eliminarReporte(id) {
            if (confirm(`¿Estás seguro de que deseas eliminar el reporte con ID ${id}?`)) {
                try {
                    const response = await fetch(`${API_BASE_URL}/api/Reportes/${id}`, {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        document.getElementById('mensaje').innerHTML = `<div class="alert alert-success">Reporte ${id} eliminado exitosamente.</div>`;
                        // Recarga la página para mostrar la lista actualizada
                        window.location.reload();
                    } else {
                        const errorData = await response.json();
                        document.getElementById('mensaje').innerHTML = `<div class="alert alert-danger">Error al eliminar reporte: ${errorData.detail || errorData.title}</div>`;
                        console.error('Error del API:', errorData);
                    }
                } catch (error) {
                    console.error('Error de red al eliminar el reporte:', error);
                    document.getElementById('mensaje').innerHTML = `<div class="alert alert-danger">Ocurrió un error de red: ${error.message}.</div>`;
                }
            }
        }

        function formatDateTime(dateString) {
            if (!dateString) {
                return ''; // Si el valor es null o vacío, retorna una cadena vacía
            }
            const date = new Date(dateString);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Meses son 0-indexados
            const year = date.getFullYear();
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');

            return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
        }
    </script>
}