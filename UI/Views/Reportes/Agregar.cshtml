@model UI.Models.ReporteViewModel
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<h2>Agregar Reporte</h2>

<form id="AgregarReporteForm">
    <div class="form-group">
        <label>"Nombre Reporte"</label>
        <input asp-for="Reporte.nombreReporte" class="form-control" required />
    </div>

    <h3>Parámetros del Reporte</h3>
    <div class="form-group">
        <label>Fecha próximo envío desde"</label>
        <input type="date" asp-for="Reporte.parametros.fechaDesde" class="form-control" />
    </div>
    <div class="form-group">
        <label>Fecha próximo envío hasta"</label>
        <input type="date" asp-for="Reporte.parametros.fechaHasta" class="form-control" />
    </div>
    <div class="form-group">
        <label>Especies</label>
        @{
            var especiesList = new SelectList(Model.Especies, "idEspecie", "nombreComun");
        }
        <select asp-for="Reporte.parametros.especies" class="form-control" multiple asp-items="especiesList"></select>
    </div>
    <div class="form-group">
        <label>Ubicaciones</label>
        @{
            var ubicacionesList = new SelectList(Model.Ubicaciones, "idUbicacion", "nombre");
        }
        <select asp-for="Reporte.parametros.ubicaciones" class="form-control" multiple asp-items="ubicacionesList"></select>
    </div>

    <h3>Destinatarios</h3>
    <div id="destinatariosContainer">
    </div>
    <button type="button" class="btn btn-secondary" onclick="agregarDestinatario()">Agregar Destinatario</button>

    <button type="submit" class="btn btn-primary">Guardar Reporte</button>
</form>
<div id="mensaje" class="mt-3"></div>

@section Scripts {
    <script>
        function agregarDestinatario() {
            const container = document.getElementById('destinatariosContainer');
            const newIndex = container.children.length;
            const newDestinatario = document.createElement('div');
            newDestinatario.innerHTML = `
                <div class="form-row">
                    <div class="col">
                        <input type="text" name="destinatarios[${newIndex}].nombre" class="form-control" placeholder="Nombre" />
                    </div>
                    <div class="col">
                        <input type="text" name="destinatarios[${newIndex}].apellido" class="form-control" placeholder="Apellido" />
                    </div>
                    <div class="col">
                        <input type="email" name="destinatarios[${newIndex}].email" class="form-control" placeholder="Email" required />
                    </div>
                </div>
            `;
            container.appendChild(newDestinatario);
        }
    </script>

    <script>
        document.getElementById('AgregarReporteForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const mensajeDiv = document.getElementById('mensaje');
            mensajeDiv.innerHTML = '';
            const form = this;
            const formData = new FormData(form);

            // Construye el objeto de reporte con los parámetros y destinatarios
            const reporteData = {
                id: 0, // El id se generará en el backend
                nombreReporte: formData.get('Reporte.nombreReporte'),
                activo: true, // O un campo de checkbox en el formulario
                // ... otras propiedades del Reporte
                parametros: {
                    fechaDesde: formData.get('Reporte.parametros.fechaDesde'),
                    fechaHasta: formData.get('Reporte.parametros.fechaHasta'),
                    especies: [...form.querySelector('[name="Reporte.parametros.especies"]').options].filter(option => option.selected).map(option => ({ idEspecie: parseInt(option.value) })),
                    ubicaciones: [...form.querySelector('[name="Reporte.parametros.ubicaciones"]').options].filter(option => option.selected).map(option => ({ idUbicacion: parseInt(option.value) })),
                },
                destinatarios: [], // Se llenará a continuación
            };

            const destinatarioInputs = form.querySelectorAll('#destinatariosContainer .form-row');
            destinatarioInputs.forEach(row => {
                const nombre = row.querySelector('[name^="destinatarios["][name$="].nombre"]').value;
                const apellido = row.querySelector('[name^="destinatarios["][name$="].apellido"]').value;
                const email = row.querySelector('[name^="destinatarios["][name$="].email"]').value;
                reporteData.destinatarios.push({ nombre, apellido, email });
            });

            const API_BASE_URL = "@Configuration["AppSettings:ApiBaseUrl"]";
            const apiUrl = `${API_BASE_URL}/api/Reportes`;

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(reporteData)
                });

                if (response.ok) {
                    const result = await response.json();
                    mensajeDiv.className = 'alert alert-success';
                    mensajeDiv.innerHTML = `Reporte '${result.nombreReporte}' agregado exitosamente con ID: ${result.idReporte}.`;
                    // Redirige o resetea el formulario
                } else {
                    const errorData = await response.json();
                    mensajeDiv.className = 'alert alert-danger';
                    mensajeDiv.innerHTML = 'Error al agregar el reporte.';
                    console.error('Error del API:', errorData);
                }
            } catch (error) {
                console.error('Error de red al guardar el reporte:', error);
                mensajeDiv.className = 'alert alert-danger';
                mensajeDiv.innerHTML = `Ocurrió un error de red: ${error.message}.`;
            }
        });
    </script>
}